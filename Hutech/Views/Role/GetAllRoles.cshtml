@model Hutech.Models.RolesViewModel
@{
    Layout = !Context.Request.Headers["X-Requested-With"].ToString().Equals("XMLHttpRequest", StringComparison.OrdinalIgnoreCase) ? "_Layout" : null;
}
<div id="content">
    <div class="container-fluid">
        <div class="animated fadeIn">
            <div class="row">
                <div class="col-lg-12">

                    <div class="card">
                        <div class="card-header">
                            <i class="fa fa-align-justify"></i> Roles
                            <a href="/Role/AddRole">Add Role</a>
                        </div>
                        <div class="card-body">
                            <table class="table table-responsive-sm">
                                <thead>
                                    <tr>
                                        <th>RoleName</th>
                                        <th></th>
                                        <th>Created By/ Role</th>
                                        <th>Created On</th>
                                        <th>Action</th>
                                        @*<th>Delete</th>*@
                                    </tr>
                                </thead>
                                @{
                                    int recordsPerPage = 10;
                                    int pageNumber = Model.CurrentPage;
                                    int pageSize = pageNumber + 4;
                                    int rowNo = ((pageNumber - 1) * recordsPerPage);
                                }
                                <tbody>
                                    <tr>
                                        <td>
                                            @Html.TextBoxFor(x => x.RoleName, new { @class = "form-control", @placeholder = "Search", @onKeyUp = "Filter()", @value = @ViewBag.RoleName != null ? @ViewBag.RoleName : "" })
                                        </td>
                                        <td></td>
                                        <td>
                                            @Html.TextBoxFor(x => x.UpdatedBy, new { @class = "form-control", @placeholder = "Search", @onKeyUp = "Filter()", @value = @ViewBag.UpdatedBy != null ? @ViewBag.UpdatedBy : "" })
                                        </td>
                                        <td>
                                            <input asp-for="@Model.UpdatedDate" class="form-control" onchange="Filter()" />
                                        </td>
                                    </tr>
                                    @for (int i = 0; i < Model.Roles.Count; i++)
                                    {
                                        <tr>
                                            <td>@Model.Roles[i].Name</td>
                                            <td>
                                                <button data-id="@Model.Roles[i].Id" data-toggle="modal" data-target="#accessRightModal" class="ModalClick btn btn-primary"> Access Right </button>
                                            </td>
                                            <td>@Model.Roles[i].fullname (@Model.Roles[i].Role)</td>
                                            @if (Model.Roles[i].DateModifiedUtc != null)
                                            {
                                                <td>@Model.Roles[i].DateModifiedUtc.ToString("dd MMM yyyy HH:mm")</td>
                                            }
                                            else
                                            {
                                                <td>@Model.Roles[i].DatecreatedUtc.ToString("dd MMM yyyy HH:mm")</td>
                                            }
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-secondary dropdown-toggle" id="btnGroupDrop1" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Action</button>
                                                    <div class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                                        <a class="dropdown-item" href="/Role/EditRole?id=@Model.Roles[i].Id">Edit</a>
                                                        <a class="dropdown-item" href="/Role/DeleteRole?id=@Model.Roles[i].Id" onclick="return confirm('Are you sure want to delete?')">Deactivate</a>
                                                    </div>
                                                </div>
                                            </td>
                                            @*<td><a href="/Role/EditRole?id=@Model[i].Id">Edit</a></td>
                                        <td><a href="/Role/DeleteRole?id=@Model[i].Id" onclick="return confirm('Are you sure want to delete?')">Delete</a></td>*@
                                        </tr>
                                    }
                                    <inpu type="hidden" id="selectedRole">
                                </tbody>
                            </table>
                            @if (Model.TotalPages > 1)
                            {
                                string formattedDate = string.Empty;
                                if (Model.UpdatedDate != null)
                                {
                                    formattedDate = Model.UpdatedDate.Value.ToString("yyyy-MM-dd");
                                }
                                <nav>
                                    <ul class="pagination">
                                        @if (pageNumber > 1)
                                        {
                                            int prevPage = pageNumber - 1;
                                            <li class="page-item">
                                                <a class="page-link" href="/Role/GetAllRoles?pageNumber=@prevPage&roleName=@Model.RoleName&updatedBy=@Model.UpdatedBy&updatedDate=@formattedDate">Prev</a>
                                            </li>
                                        }
                                        @for (int i = pageNumber; i <= Model.TotalPages && i <= pageSize; i++)
                                        {
                                            if (i == pageNumber)
                                            {
                                                <li class="page-item active">
                                                    <a class="page-link" href="/Role/GetAllRoles?pageNumber=@i&roleName=@Model.RoleName&updatedBy=@Model.UpdatedBy&updatedDate=@formattedDate">@i</a>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="page-item">
                                                    <a class="page-link" href="/Role/GetAllRoles?pageNumber=@i&roleName=@Model.RoleName&updatedBy=@Model.UpdatedBy&updatedDate=@formattedDate">@i</a>
                                                </li>
                                            }
                                        }
                                        @if (pageNumber < Model.TotalPages)
                                        {
                                            int nextPage = pageNumber + 1;
                                            <li class="page-item">
                                                <a class="page-link" href="/Role/GetAllRoles?pageNumber=@nextPage&roleName=@Model.RoleName&updatedBy=@Model.UpdatedBy&updatedDate=@formattedDate">Next</a>
                                            </li>
                                        }
                                    </ul>
                                </nav>
                            }
                        </div>
                    </div>
                </div>
                <!-- /.col-->

            </div>
            <!-- /.row-->
        </div>
    </div>
</div>

<div class="modal fade" id="accessRightModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">User Access RIghts</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            </div>
            <div class="modal-body" id="data">
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" type="submit" id="submitMenuAccess">Save changes</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@if (TempData["message"] != null)
{
    <script type="text/javascript">
        window.onload = function () {
            alert("@TempData["message"]");
            var url = "@TempData["RedirectURl"]";
            window.location.href = url;
        };
    </script>
}
<script type="text/javascript">
    // Function to attach event listeners to checkboxes
    function attachCheckboxChangeEvents() {
        var checkboxes = document.querySelectorAll('#data input[type="checkbox"]');
        checkboxes.forEach(function (checkbox) {
            checkbox.addEventListener('change', handleCheckboxChange);
        });
    }
    // function handleCheckboxChange(event) {
    //     var checkbox = event.target;
    //     var parentId = checkbox.dataset.parentid;
    //     var id = checkbox.dataset.id;
    //     // If parentId > 0, check/uncheck all child checkboxes
    //     if (parentId > 0) {
    //         debugger;
    //         var childCheckboxes = document.querySelectorAll('[data-id="' + parentId + '"]');
    //         var allChecked = true;

    //         childCheckboxes.forEach(function (childCheckbox) {
    //             if (!childCheckbox.checked) {
    //                 allChecked = false;
    //             }
    //         });

    //         // Update parent checkbox state based on child checkboxes
    //         var parentCheckbox = document.getElementById('parentCheckbox' + parentId);
    //         parentCheckbox.checked = allChecked;
    //     } else {
    //         debugger;
    //         // If it's a parent checkbox, check/uncheck all child checkboxes
    //         // var childCheckboxes = document.querySelectorAll('[data-parentid="' + checkbox.id.replace('parentCheckbox', '') + '"]');
    //         // childCheckboxes.forEach(function (childCheckbox) {
    //         //     childCheckbox.checked = checkbox.checked;
    //         // });
    //         var childCheckboxes = document.querySelectorAll('[data-parentid="' + id + '"]');
    //         childCheckboxes.forEach(function (childCheckbox) {
    //             childCheckbox.checked = checkbox.checked;
    //         });
    //     }
    // }
    function handleCheckboxChange(event) {
        var checkbox = event.target;
        var parentId = checkbox.dataset.parentid;
        var id = checkbox.dataset.id;
        // If parentId > 0, check/uncheck all child checkboxes
        if (id > 0) {
            var childCheckboxes = document.querySelectorAll('[data-parentid="' + id + '"]');
            childCheckboxes.forEach(function (childCheckbox) {
                childCheckbox.checked = checkbox.checked;
            });
        }
        if (parentId > 0) {
            var childCheckboxes = document.querySelectorAll('[data-id="' + parentId + '"]');
            childCheckboxes.forEach(function (childCheckbox) {
                childCheckbox.checked = checkbox.checked;
            });
            var childCheckboxes = document.querySelectorAll('[data-parentid="' + parentId + '"]');
            childCheckboxes.forEach(function (childCheckbox) {
                var ischecked= childCheckbox.checked;
                if(!ischecked)
                {
                    var childCheckboxdata = document.querySelectorAll('[data-id="' + parentId + '"]');
                    childCheckboxdata[0].checked = false;
                    return;
                }
            });
        }
    }
    $('#submitMenuAccess').click(function () {
        // Initialize an array to store selected menu access
        var selectedMenus = [];

        // Iterate over all checkboxes within the form
        $('#data input[type="checkbox"]').each(function () {
            if ($(this).is(':checked')) {
                // If checkbox is checked, add its value (menu name) to the selectedMenus array
                var id = $(this).attr('data-id');
                selectedMenus.push(id);
            }
        });
        var roleId = $("#selectedRole").val();
        var data = {
            selectedMenuIds: selectedMenus,
            roleId: roleId
        }
        var url = '/Role/SaveMenuAccessOfRole?selectedMenuIds=' + selectedMenus + '&roleId=' + roleId;

        // Sending selected menu access IDs via AJAX
        $.ajax({
            url: url,// URL of your MVC controller action
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data), // Serialize array to JSON string
            success: function (response) {
                alert(response.message);
                $("#accessRightModal").hide();
                window.location.reload();
                // Handle success response if needed
            },
            error: function (error) {
                console.error('Error saving menu access:', error);
                // Handle error response if needed
            }
        });
        // Display selected menu access (for demonstration)
        console.log('Selected Menu Access:', selectedMenus);
        // Close the modal after handling the submit event
        $('#menuAccessModal').modal('hide');
    });
    $(".ModalClick").click(function () {
        var roleId = $(this).data('id');//get the id of the selected button
        roleId = roleId;
        $("#selectedRole").val(roleId);
        // get menu this.access right for Selected role
        $.ajax({
            url: '/Role/GetMenuAceessRightForRole?selectedroleId=' + roleId,
            type: 'GET',
            success: function (response) {
                var table = $('<table>').addClass('table');

                // Iterate over each record and create table rows and cells
                response.forEach(function (response) {
                    var row = $('<tr>');

                    // Create table cells (columns) for each record property
                    $('<td>').text(response.name).appendTo(row);      // Display Id
                    $('<td>').append($('<input>').attr('type', 'checkbox').prop('checked', response.isUserHaveAccess).attr('data-id', response.id).attr('data-parentid', response.parentId)).appendTo(row); // Display Checkbox

                    // Append the row to the table
                    table.append(row);
                });

                // Display the table within a modal popup
                $('#data').html(table); // Assuming 'myModalBody' is the modal body element

                // Show the modal popup
                $('#myModal').modal('show'); // Assuming 'myModal' is the modal element
                attachCheckboxChangeEvents();
            },
            error: function (error) {
                console.error('Error fetching menu data:', error);
            }
        });

        // $('input:text').val(passedID);//set the id to the input on the modal
    });
    function Filter() {
        let roleName = $("#RoleName").val();
        let updatebyOrRole = $("#UpdatedBy").val();
        let date = $("#UpdatedDate").val();
        if (roleName == "" && roleName.length == 0)
            roleName = null;
        if (updatebyOrRole == "" && updatebyOrRole.length == 0)
            updatebyOrRole = null;
        if (date == "")
            date = null;
        var model = {
            roleName: roleName,
            updatedBy: updatebyOrRole,
            updatedDate: date
        };
        $.ajax({
            url: '/Role/GetAllRoles',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(model),
            success: function (response) {
                // Handle successful response from the server
                var div = document.getElementById("content");
                div.innerHTML = response;
            },
            error: function (xhr, status, error) {
                // Handle error response from the server
                console.error(xhr.responseText);
            }
        });
    }
</script>