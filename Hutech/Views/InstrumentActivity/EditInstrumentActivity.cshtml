@model Hutech.Models.InstrumentActivityViewModel;
@{
    Layout = "_Layout";
}
<style>
    .multiselect-option {
        display: flex !important;
    }

    .dropdown-item {
        display: flex !important;
    }

    .multiselect {
        width: 100% !important;
    }

    .multiselect-container {
        width: 100% !important;
    }

    
</style>
<form class="horizontal" method="post" asp-controller="InstrumentActivity" asp-action="EditInstrumentActivity" asp-antiforgery="true">
    <div class="col-sm-12">
        <div class="card">
            <div class="card-header">
                <strong>Add Instrument Activity</strong>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Instrument ActivityId*</label>
                            @Html.TextBoxFor(x => x.InstrumentActivityId, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.InstrumentActivityId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Instrument Name</label>
                            @Html.DropDownListFor(x=>x.InstrumentId,Model.Instruments,"Please select Instrument",new {@class="form-control processbank",onchange="handleInstrumentChange()"})
                            @Html.ValidationMessageFor(x=>x.InstrumentId,"", new { @class = "text-danger"})

                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Activity Name</label>
                            @Html.DropDownListFor(x=>x.ActivityId,Model.Activities,"Please select Activity",new {@class="form-control processbank",onchange="handleActivityChange()"})
                            @Html.ValidationMessageFor(x=>x.ActivityId,"", new { @class = "text-danger"})
                        </div>
                    </div>

                   
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Instrument+Activity</label>
                            @Html.TextBoxFor(x => x.InstrumentActivityName, new { @class = "form-control", @readonly = true })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Frequency Period</label>
                        </div>
                        @foreach (var c in System.Enum.GetValues(typeof(FrequencyEnum)))
                        {
                            @if (Model.Frequency == @c)
                            {
                                <input type="radio" asp-for="Frequency" value="@c" class="frequency frequencyUnit" checked />
                            }
                            else
                            {
                                <input type="radio" asp-for="Frequency" value="@c" class="frequency frequencyUnit" />
                            }
                            <label for="company">@c</label>
                        }
                        @Html.ValidationMessageFor(x=>x.Frequency,"", new { @class = "text-danger"})
                    </div>
                    <div class="col-md-4">
                        <label for="company">Frequency Value(Only digits allow)</label>
                        @Html.TextBoxFor(x=>x.FrequencyTime,new{@class="form-control",onkeypress="return isNumber(event)" })
                        @Html.ValidationMessageFor(x=>x.FrequencyTime,"", new { @class = "text-danger"})
                    </div>
                   
                    @Html.HiddenFor(x=>x.Id)
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">+-Days</label>
                            @Html.TextBoxFor(x => x.Days, new { @class = "form-control", onkeypress = "return isNumber(event)" })
                            @Html.ValidationMessageFor(x => x.Days, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Requirement</label>
                            @Html.DropDownListFor(x=>x.RequirementId,Model.Requirement,"Please select Requirement",new {@class="form-control processbank"})
                            @Html.ValidationMessageFor(x=>x.RequirementId,"", new { @class = "text-danger"})
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Department</label>
                            @Html.DropDownListFor(x=>x.DepartmentId,Model.Department,"Please select Department",new {@class="form-control processbank"})
                            @Html.ValidationMessageFor(x=>x.DepartmentId,"", new { @class = "text-danger"})
                        </div>
                    </div>
                   
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Email Required</label><br />
                            @Html.ListBoxFor(model => model.SelectedEmailListInt, Model.EmailList, new { @class = "form-control", id = "Emails", multiple = "multiple" })
                            @Html.ValidationMessageFor(x => x.SelectedEmailListInt, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Before Alerts</label>
                            @Html.CheckBoxFor(x=>x.BeforeAlerts,new{onclick="checkBeforeAlerts()"})
                        </div>
                    </div>
                    <div class="col-md-4">
                        <label for="company">Before Alert value(Only Digits allow)</label>
                        @if (Model.BeforeAlerts)
                        {
                            @Html.TextBoxFor(x=>x.BeforeAlertsTime,new{@class="form-control",onkeypress="return isNumber(event)"})
                            @Html.ValidationMessageFor(x=>x.BeforeAlertsTime,"", new { @class = "text-danger"})
                        }
                        else
                        {
                            @Html.TextBoxFor(x=>x.BeforeAlertsTime,new{@class="form-control",@disabled = "disabled",onkeypress="return isNumber(event)"})
                            @Html.ValidationMessageFor(x=>x.BeforeAlertsTime,"", new { @class = "text-danger"})
                        }
                        
                    </div>
                    <div class="form-group">
                        <label for="company">Status</label>
                        <div class="input-prepend input-group">
                            @Html.RadioButtonFor(x => x.IsActive, "true")<label for="company" class="status ">Active</label> &nbsp;&nbsp;
                            @Html.RadioButtonFor(x => x.IsActive, "false")<label for="company" class="status frequencyUnit">InActive</label>
                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <button class="btn btn-primary" type="submit">Save changes</button>
                    <button class="btn btn-secondary" type="button" onclick="window.history.back()">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</form>
@if (TempData["message"] != null)
{
    <script type="text/javascript">
        window.onload = function () {
            alert("@TempData["message"]");
            var url = "@TempData["RedirectURl"]";
            var Id = $("#Id").val();
            window.location.href = url + "?id=" + Id;
        };
    </script>
}
<script type="text/javascript">
    function checkBeforeAlerts() {
        var checkBox = document.getElementById("BeforeAlerts");
        if (checkBox.checked == true) {
            document.getElementById("BeforeAlertsTime").disabled = false;
        } else {
            $("#BeforeAlertsTime").val('');
            document.getElementById("BeforeAlertsTime").disabled = true;
        }
    }
    function isNumber(evt) {
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        return true;
    }
    $('#Emails').multiselect({
        includeSelectAllOption: true,
    });
    function handleInstrumentChange() {
        var instrumentId = $("#InstrumentId option:selected").text();
        var activityId = $("#ActivityId option:selected").text();
        var instrumentActivity = instrumentId + "-" + activityId;
        $("#InstrumentActivityName").val(instrumentActivity);
    }
    function handleActivityChange() {
        var instrumentId = $("#InstrumentId option:selected").text();
        var activityId = $("#ActivityId option:selected").text();
        var instrumentActivity = instrumentId + "-" + activityId;
        $("#InstrumentActivityName").val(instrumentActivity);

    }
</script>
