@model Hutech.Models.ActivityDetailsDocumentViewModel;
@* <form class="horizontal" method="post" asp-controller="ActivityDetails" asp-action="AddActivityDetails"> *@
@using (Html.BeginForm("AddActivityDetails", "ActivityDetails", FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "validateForm(event)" }))
{
    @Html.AntiForgeryToken()
    <div class="col-sm-12">
        <div class="card">
            <div class="card-header">
                <strong>Add Activity Details</strong>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Instrument Name Id</label>
                            @Html.DropDownListFor(x=>x.InstrumentId,Model.InstrumentNameId,"Please select Instrument",new {@class="form-control processbank",onchange="changeInstrumentName()",@Id="InstrumentNameId",@name="InstrumentNameId"})
                            @Html.ValidationMessageFor(x => x.InstrumentId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Instrument Name</label>
                            @Html.TextBoxFor(x=>x.InstrumentName,new{Placeholder="Enter Instrument Id",@class="form-control",@readonly="true"})
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Instrument Serial</label>
                            @Html.TextBoxFor(x=>x.InstrumentSerial,new{Placeholder="Enter Instrument Id",@class="form-control",@readonly="true"})
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Model</label>
                            @Html.TextBoxFor(x=>x.Model,new{Placeholder="Enter Instrument Id",@class="form-control",@readonly="true"})
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Location Name</label>
                            @Html.TextBoxFor(x=>x.LocationName,new{Placeholder="Enter Instrument Id",@class="form-control",@readonly="true"})
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Instrument Name Activity</label>
                            @Html.DropDownListFor(x=>x.InstrumentActivityId,Model.InstrumentsActivity,"Please select Instrument",new {@class="form-control processbank",onchange="changeInstrumentActivity()",@Id="InstrumentNameActivityId",@name="InstrumentNameActivityId"})
                            @Html.ValidationMessageFor(x => x.InstrumentActivityId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">+- Days</label>
                            @Html.TextBoxFor(x=>x.Days,new{Placeholder="Enter Instrument Id",@class="form-control",@readonly="true"})
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Frequency Period</label>
                        </div>
                        @foreach (var c in System.Enum.GetValues(typeof(FrequencyEnumData)))
                        {
                            <label for="company">@c</label>
                            @if (Model.Frequency == @c)
                            {
                                <input type="radio" asp-for="Frequency" value="@c" id="@c" class="frequency" checked/>
                            }
                            else
                            {
                                <input type="radio" asp-for="Frequency" value="@c" id="@c" class="frequency"  />
                            }

                        }
                        @Html.HiddenFor(x=>x.Frequency)
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Team Name</label>
                            @Html.TextBoxFor(x=>x.TeamName,new{Placeholder="Enter Instrument Id",@class="form-control",@readonly="true"})
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Team Location</label>
                            @Html.TextBoxFor(x=>x.TeamLocation,new{Placeholder="Enter Instrument Id",@class="form-control",@readonly="true"})
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Requirement Name</label>
                            @Html.TextBoxFor(x=>x.RequirementName,new{Placeholder="Enter Instrument Id",@class="form-control",@readonly="true"})
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Follow Department</label>
                            @Html.TextBoxFor(x=>x.DeaprtmentName,new{Placeholder="Enter Instrument Id",@class="form-control",@readonly="true"})
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Remark</label>
                            @Html.TextAreaFor(x=>x.Remark,new{Placeholder="Enter Remark",@class="form-control"})
                            @Html.ValidationMessageFor(x => x.Remark, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Select Multiple Files</label>
                            <input asp-for="Files" class="form-control" multiple />
                            <span asp-validation-for="Files" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="company">Performed Date</label>
                            @*@Html.EditorFor(model => model.PerformedDate,
                            new { htmlAttributes = new { @id = "PerformedDate", @class = "form-control datefield" } })*@

                            @*<div class="input-group date" data-target-input="nearest">
                            <input asp-for="@Model.PerformedDate" class="form-control datepicker" max="@DateTime.Now.ToString("yyyy-MM-ddThh:mm")" min="@DateTime.Now.AddYears(-1).ToString("yyyy-MM-ddThh:mm")" />
                            </div>*@
                            @Html.EditorFor(model => model.PerformedDate, new { htmlAttributes = new { @class = "form-control", placeholder = "Employee Date Of Birth" } })


                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <input class="btn btn-primary" type="submit" value="Save changes">
                    <button class="btn btn-secondary" type="button" onclick="window.history.back()">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
@if (TempData["message"] != null)
{
    <script type="text/javascript">
        window.onload = function () {
            alert("@TempData["message"]");
            var url = "@TempData["RedirectURl"]";
            window.location.href = url;
        };
    </script>
}
<@* /form> *@
<script type="text/javascript">
    var success = "true";
    $(':radio').click(function () {
        return false;
    });

    $(function () {
        $('[type="date"]').prop('max', function () {
            return new Date().toJSON().split('T')[0];
        });
    });
    function changeInstrumentName() {
        var instrumentActivityId = $("#InstrumentNameId option:selected").val();
        $.ajax({
            url: '/ActivityDetails/GetInstrumentIdDetail',
            type: 'Post',
            data: {
                Id: instrumentActivityId
            },
            success: function (response) {
                $("#InstrumentSerial").val(response.instrumentSerial);
                $("#Model").val(response.model);
                $("#InstrumentName").val(response.instrumentName);
                $("#LocationName").val(response.locationName);
                $("#TeamName").val(response.teamName);
                $("#TeamLocation").val(response.teamLocation);
            },
            error: function (response) {
                alert("Fail");
            }
        })
    }
    function changeInstrumentActivity() {
        var instrumentId = $("#InstrumentNameActivityId option:selected").val();
        $.ajax({
            url: '/ActivityDetails/GetInstrumentActivityDetail',
            type: 'Post',
            data: {
                Id: instrumentId
            },
            success: function (response) {
                $("#Days").val(response.days);
                radiobtn = document.getElementById(response.frequency);
                radiobtn.checked = true;
                $("#RequirementName").val(response.requirementName);
                $("#DeaprtmentName").val(response.deaprtmentName);
            },
            error: function (response) {
                alert("Fail");
            }
        })
    }
    function validateForm(event) {
        event = event || window.event || event.srcElement;
        if (success == "true") {
            document.forms['myform'].submit();
        }
        else {
            event.preventDefault();
            return false;
        }
    }
$("#Files").change(function () {
    var allowedExtension = '@ViewBag.AllowedFileExtension';
    var allowedFileSize = '@ViewBag.AlloweFileSize';
    var size = parseInt(allowedFileSize);
    var files = document.getElementById('Files');
    for (var i = 0; i < files.files.length; ++i) {
        var name = files.files.item(i).name;
        var ext = name.split(".").slice(-1)[0];

        var sizeInBytes = files.files.item(i).size;
        let fileSizeMB = sizeInBytes / (1024 ** 2)

        if (!allowedExtension.includes(ext)) {
            alert(ext + " is not supported " + "Only supported Extensions are " + allowedExtension);
            success = 'false';
            event.preventDefault();
        }
        else {
            if (fileSizeMB > size) {
                alert("Maximum file size is " + size + " MB");
                success = 'false';
                event.preventDefault();
            }
            else {
                success = 'true';

            }
        }
    }
});
</script>
